// settings.gradle

pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url("https://s01.oss.sonatype.org/content/repositories/releases/")
            content {
                includeGroup("dev.rikka.tools.refine")
                includeGroup("dev.rikka.tools.autoresconfig")
                includeGroup("dev.rikka.tools.materialthemebuilder")
            }
        }
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
        maven {
            url("https://s01.oss.sonatype.org/content/repositories/releases/")
            content {
                // Use regex escaping for dots
                includeGroupByRegex("dev\\.rikka.*")
                includeGroup("org.lsposed.hiddenapibypass")
            }
        }
    }
    versionCatalogs {
        libs {
            version('hidden-api', '4.3.3')
            library('hidden-compat', 'dev.rikka.hidden', 'compat').versionRef('hidden-api')
            library('hidden-stub', 'dev.rikka.hidden', 'stub').versionRef('hidden-api')

            version('refine', '4.3.0')
            library('refine-runtime', 'dev.rikka.tools.refine', 'runtime').versionRef('refine')
            library('refine-annotation', 'dev.rikka.tools.refine', 'annotation').versionRef('refine')
            library('refine-annotation-processor', 'dev.rikka.tools.refine', 'annotation-processor').versionRef('refine')
            plugin('refine', 'dev.rikka.tools.refine').versionRef('refine')
        }
    }
}

// Set the root project name
rootProject.name = "Shizuku"

// Include core modules
include ':server', ':starter', ':shell', ':manager', ':common'

// Determine the root directory for additional modules (default "api")
def rootDirName = "api"
def propFile = file('local.properties')
if (propFile.canRead()) {
    def props = new Properties()
    propFile.withInputStream { stream ->
        props.load(stream)
    }
    if (props.getProperty("api.useLocal")?.toBoolean()) {
        rootDirName = props.getProperty("api.dir", "api")
    }
}

// Helper function to include a project and set its directory dynamically
def includeProject = { projectName, subDir ->
    include ":${projectName}"
    project(":${projectName}").projectDir = file("$rootDirName${File.separator}${subDir}")
}

// Include additional projects with custom directories
includeProject('aidl', 'aidl')
includeProject('rish', 'rish')
includeProject('shared', 'shared')
includeProject('api', 'api')
includeProject('provider', 'provider')
includeProject('server-shared', 'server-shared')
includeProject('hidden-api-stub', 'hidden-api-stub')
